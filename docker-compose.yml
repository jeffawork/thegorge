version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: the_gorge
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5433"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d the_gorge"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend API
  api:
    build: .
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_NAME: the_gorge
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-change-this-password}
      JWT_SECRET: ${JWT_SECRET:-change-this-jwt-secret}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change-this-refresh-secret}
      LOG_LEVEL: info
      MOCK_DATABASE: false
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      seed:
        condition: service_completed_successfully
    restart: unless-stopped

  # Database migrations
  migrate:
    build: .
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_NAME: the_gorge
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-change-this-password}
      MOCK_DATABASE: false
    command: npm run migrate:run
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Database seeding
  seed:
    build: .
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_NAME: the_gorge
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-change-this-password}
      MOCK_DATABASE: false
    command: npm run seed:run
    depends_on:
      migrate:
        condition: service_completed_successfully
    restart: "no"

volumes:
  postgres_data: